name: Autograding Tests
'on':
- push
- repository_dispatch
permissions:
  checks: write
  actions: read
  contents: read
jobs:
  run-autograding-tests:
    runs-on: ubuntu-latest
    if: github.actor != 'github-classroom[bot]'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: test
      id: test
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: test
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: "% Actor communication where Actor X sends a message to Actor Y, and
          Actor Z observes this message\n\nActor X {\n    actorVars {\n        string
          name;\n        int id;\n    }\n\n    % Constructor\n    X(string name, int
          id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    %
          Method to send message to Y, observed by Z\n    msgRcv sendMessage(string
          msgContent, ID receiver, ID observer) {\n        print(name + \" sends message
          to \" + receiver + \": \" + msgContent);\n        \n        % Send the message
          to Y’s queue as the recipient and Z’s queue as the observer\n        receiver.receiveMessage(msgContent)
          @observers(private(observer, null));\n    }\n}\n\nActor Y {\n    actorVars
          {\n        string name;\n        int id;\n    }\n\n    % Constructor\n    Y(string
          name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n\n
          \   % Handler to receive a message\n    msgRcv receiveMessage(string msgContent)
          {\n    }\n}\n\nActor Z {\n    actorVars {\n        string name;\n        int
          id;\n    }\n\n    % Constructor\n    Z(string name, int id) {\n        this.name
          = name;\n        this.id = id;\n    }\n\n    % Observer handler to log observed
          messages\n    msgRcv observeMessage(string msgContent) {\n    }\n}\n\nmain()
          {\n    % Instantiation of actors X, Y, and Z\n    X senderActor = new X(\"Alice\",
          101);\n    Y receiverActor = new Y(\"Bob\", 102);\n    Z observerActor =
          new Z(\"Charlie\", 103);\n\n    % Alice sends message \"Hello, Bob!\" to
          Bob, observed by Charlie\n    senderActor.sendMessage(\"Hello, Bob!\", receiverActor,
          observerActor);\n}\n"
        expected-output: |-
          Line 11 : Assignment
          Line 12 : Assignment
          Line 16 : msgRcv: sendMessage
          Line 17 : Built-In: PRINT
          Line 17 : Operator:+
          Line 17 : Operator:+
          Line 17 : Operator:+
          Line 17 : Operator:+
          Line 20 : Send Message
          Line 20 : Built-In: PRIVATE
          Line 32 : Assignment
          Line 33 : Assignment
          Line 37 : msgRcv: receiveMessage
          Line 49 : Assignment
          Line 50 : Assignment
          Line 54 : msgRcv: observeMessage
          Line 58 : MAIN
          Line 60 : Assignment
          Line 61 : Assignment
          Line 62 : Assignment
          Line 65 : Send Message
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: Comment
      id: comment
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: Comment
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: |
          % We use the {%} symbol as the comment primitive and use another sign for mod
          main() {
              % print("meow");
          }
        expected-output: 'Line 2 : MAIN'
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: Access Specifier
      id: access-specifier
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: Access Specifier
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: |-
          % PRIVATE INCLUDES
          % PUBLIC EXCLUDES

          Actor instagramUser {
              % Public excludes others in communication while Private includes them
              % They take two parameters and for including/excluding three or more we can nest additional private/public parameters
              actorVars {
                  Set<ID> Followers;
                  Set<ID> Followings;
                  List<string> posts;
                  List<string> closeFriendPosts;
              }
          }

          main () {
          }
        expected-output: 'Line 15 : MAIN'
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: Loops
      id: loops
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: Loops
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: |
          % Can be used in either main() or message handler
          main() {

              % For loops works like python (can use range or any other iterable)

              % For simple iterations we just use range without defining n beforehand
              for (n in range(0,10)) {
                  % Maow
              }

              Set<string> names;
              for (n in names) {
                  % Maow
              }

              int n = 0;
              % while loops
              while (n < 100) {
                  n = n + 1;
                  % Maow
              }

          }
        expected-output: |-
          Line 2 : MAIN
          Line 7 : Loop: FOR
          Line 12 : Loop: FOR
          Line 16 : Assignment
          Line 18 : Loop: WHILE
          Line 18 : Operator:<
          Line 19 : Operator:+
          Line 19 : Assignment
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: Messages
      id: messages
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: Messages
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: |
          % In LinkedIn when we follow someone it boradcasts it to our followers
          Actor LinkedInUser {
              actorVars {
                  Set<ID> Followers;
                  Set<ID> Followings;
                  Set<ID> Block;

                  List<string> posts;
                  List<string> closeFriendPosts;

                  string name;

                  int age;
              }

              LinkedInUser(Set<ID> Connections) {
                  ID ac;
                  for (ac in Connections) {
                      % Send Policy (follow request is a handler can be seen in other testCases)
                      ac.FollowRequest()  @observers(private(Followers,null)); % we have two message type : 1- observe message 2- service message
                      % Observed messages dont necessarily require implementation and may be ignored by the recipient.
                      % Service messages have a handler that performs specific actions for them.
                  }
              }

              msgRcv FollowRequest() {
                  % add to followers
              }

              % The msgObs primitive handles the boradcast message type
              msgObs FollowRequest() {
                  print("FOLLOW SHOD");
              }

          }

          main () {
          }
        expected-output: |-
          Line 18 : Loop: FOR
          Line 20 : Send Message
          Line 20 : Built-In: PRIVATE
          Line 26 : msgRcv: FollowRequest
          Line 31 : msgObs: FollowRequest
          Line 32 : Built-In: PRINT
          Line 37 : MAIN
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: Handlers
      id: handlers
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: Handlers
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: "% How handlers work with msgRcv syntax in our language\nActor LinkedInUser
          {\n    actorVars {\n        Set<ID> Followers;\n        Set<ID> Followings;\n
          \       Set<ID> Block;\n\n        List<string> posts;\n        List<string>
          closeFriendPosts;\n\n        string name;\n        int age;\n    }\n\n    %
          Receive Policy\n    msgRcv @authorized(public(Block, null)) FollowRequest()
          {\n        % The @authorized primitive specifies which actors are allowed
          to call our handler\n        % This does not mean that our handler is observer
          or servers it just decides which actors can call it\n        ageCompare(age);\n
          \   }\n\n    msgRcv ageCompare (int senderAge) {\n        if (senderAge
          > age) {\n            accept() @observers(private(sender,null));\n            sender.acceptFollow();\n
          \       } else { % we will block the users that are younger than us !!\n
          \           Block.add(sender);\n        }\n    }\n\n    msgRcv acceptFollow()
          {\n        if (!Followings.include(sender)) {\n            Followings.add(sender);\n
          \       }\n    }\n\n    msgRcv accept() {\n        if (!Followers.include(sender))
          {\n            Followers.add(sender);\n        }\n    }\n\n    msgObs accept()
          {\n        print(\"PASANDIDE SHOD\");\n    }\n\n    msgRcv Post(string s)
          {\n        if (sender!=self) {\n            % Post sending logic\n        }\n
          \   }\n}\n\nmain () {\n} "
        expected-output: |-
          Line 16 : Built-In: PUBLIC
          Line 16 : msgRcv: FollowRequest
          Line 19 : Send Message
          Line 22 : msgRcv: ageCompare
          Line 23 : Decision: IF
          Line 23 : Operator:>
          Line 24 : Send Message
          Line 24 : Built-In: PRIVATE
          Line 25 : Send Message
          Line 26 : Decision: ELSE
          Line 27 : Built-In: ADD
          Line 31 : msgRcv: acceptFollow
          Line 32 : Decision: IF
          Line 32 : Built-In: INCLUDE
          Line 32 : Operator:!
          Line 33 : Built-In: ADD
          Line 37 : msgRcv: accept
          Line 38 : Decision: IF
          Line 38 : Built-In: INCLUDE
          Line 38 : Operator:!
          Line 39 : Built-In: ADD
          Line 43 : msgObs: accept
          Line 44 : Built-In: PRINT
          Line 47 : msgRcv: Post
          Line 48 : Decision: IF
          Line 48 : Operator:!=
          Line 54 : MAIN
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: Recursion
      id: recursion
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: Recursion
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: |
          % How recursion works
          Actor FactorialCalculator {

              % Actor variables
              actorVars {
                  int result;
              }

              % Constructor
              FactorialCalculator() {
                  result = 1;
              }

              % Message handler for factorial calculation using tail recursion
              msgRcv factorial(int n, int accumulator) {
                  if (n == 1) {
                      result = accumulator;
                      join {
                          print("Factorial result: " + result.toStr());
                      }
                  } else {
                      % Tail recursion: passing updated accumulator
                      self.factorial(n - 1, accumulator * n);
                  }
              }

              msgRcv toStr(int n) {
                  % Code that makes int to str
              }

          }

          main() {
              % Sample instantiation and message passing
              ID calc = new FactorialCalculator();

              % Calculate factorial of 5 (starts with accumulator 1)
              calc.factorial(5, 1);
          }
        expected-output: |-
          Line 11 : Assignment
          Line 15 : msgRcv: factorial
          Line 16 : Decision: IF
          Line 16 : Operator:==
          Line 17 : Assignment
          Line 18 : Join
          Line 19 : Built-In: PRINT
          Line 19 : Send Message
          Line 19 : Operator:+
          Line 21 : Decision: ELSE
          Line 23 : Send Message
          Line 23 : Operator:-
          Line 23 : Operator:*
          Line 27 : msgRcv: toStr
          Line 33 : MAIN
          Line 35 : Assignment
          Line 38 : Send Message
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: Pipe Operator
      id: pipe-operator
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: Pipe Operator
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: "% The pipe operator just like the one used in bash/shell\n\nActor
          StringProcessor {\n\n    actorVars {\n        string result;\n    }\n\n\n
          \   % Message handler to convert string to lowercase\n    msgRcv toLowerCase(string
          input) {\n        sender.result = input.toLower();\n        % result is
          the actorVar that is defined above\n    }\n\n    % Message handler to reverse
          a string\n    msgRcv inverse(string input) {\n        sender.result = input.reverse();\n
          \   }\n\n    % Message handler to add a suffix\n    msgRcv addSuffix(string
          input, string suffix) {\n        sender.result = input + suffix;\n    }\n\n
          \   % Message handler to demonstrate chaining using \"pipe-like\" operator\n
          \   msgRcv processString(string input, string suffix) {\n        result
          = input;\n        join {\n            result = result % the output of the
          previous goes into the input of the next \n                            |>
          self.toLowerCase()\n                            |> self.inverse()\n                            |>
          self.addSuffix(suffix);\n            print(\"Processed string: \" + result);\n
          \       }\n    }\n}\n\nmain() {\n    % Sample instantiation and message
          passing\n    StringProcessor processor = new StringProcessor();\n\n    %
          Example string to process\n    string myString = \"HELLO\";\n\n    % Chain
          operations: convert to lowercase, reverse, and add suffix\n    processor.processString(myString,
          \"_world\");  % Output: Processed string: \"olleh_world\"\n}\n"
        expected-output: |-
          Line 11 : msgRcv: toLowerCase
          Line 12 : Built-In: LOWER
          Line 12 : Assignment
          Line 17 : msgRcv: inverse
          Line 18 : Built-In: REVERSE
          Line 18 : Assignment
          Line 22 : msgRcv: addSuffix
          Line 23 : Operator:+
          Line 23 : Assignment
          Line 27 : msgRcv: processString
          Line 28 : Assignment
          Line 29 : Join
          Line 31 : Send Message
          Line 31 : Operator:|>
          Line 32 : Send Message
          Line 32 : Operator:|>
          Line 33 : Send Message
          Line 33 : Operator:|>
          Line 30 : Assignment
          Line 34 : Built-In: PRINT
          Line 34 : Operator:+
          Line 39 : MAIN
          Line 41 : Assignment
          Line 44 : Assignment
          Line 47 : Send Message
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: Custom Primitive
      id: custom-primitive
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: Custom Primitive
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: |
          % We can make custom primitives
          Actor DoorController {

              primitive DoorState {
                  OpenedDoor,
                  ClosedDoor
              }

              actorVars {
                  string doorID;
                  DoorState doorState;
              }

              % Constructor
              DoorController() {
                  doorState = DoorState::ClosedDoor;  % Initially set the doorState to closed
              }

              % Message handler to open the door
              msgRcv openDoor() {
                  doorState = DoorState::OpenedDoor;  % Change the state to opened
              }

              % Message handler to close the door
              msgRcv closeDoor() {
                  doorState = DoorState::ClosedDoor;  % Change the state to closed
              }

          }

          main () {
          }
        expected-output: |-
          Line 16 : Assignment
          Line 20 : msgRcv: openDoor
          Line 21 : Assignment
          Line 25 : msgRcv: closeDoor
          Line 26 : Assignment
          Line 31 : MAIN
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: Join Block
      id: join-block
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: Join Block
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: "% Join blocks make it so the expressiosn in it dont get affected by
          concurrent issues\nActor GreetingActor {\n\n    % Define actor variables
          with custom primitive {actorVars}\n    actorVars {\n        string greeting;\n
          \       int repeatCount;\n    }\n\n    % Constructor to initialize variables\n
          \   GreetingActor(string initGreeting, int initRepeatCount) {\n        greeting
          = initGreeting;\n        repeatCount = initRepeatCount;\n    }\n\n    %
          Message handler to print the greeting multiple times\n    msgRcv sendGreeting()
          {\n        % Loop through the repeat count and print the greeting\n        for
          (n in range(1, 10)) {\n            print(greeting);\n            println(\"!\");
          \ % Print with a newline\n        }\n    }\n\n    % Message handler to update
          the greeting\n    msgRcv updateGreeting(string newGreeting) {\n        greeting
          = newGreeting;\n    }\n\n}\n\nmain() {\n    GreetingActor myGreeter = new
          GreetingActor(\"Hello\", 3);\n\n    % Actor instantiation and messaging
          \n    join { % meow just computation and new GreetingActor(\"Hello\", 3)
          can not be here\n\n        % Send a message to execute the sendGreeting
          handler\n        myGreeter.sendGreeting();\n\n        % Update the greeting
          and resend the message\n        myGreeter.updateGreeting(\"Hi\");\n        myGreeter.sendGreeting();\n
          \   }\n}\n"
        expected-output: |-
          Line 12 : Assignment
          Line 13 : Assignment
          Line 17 : msgRcv: sendGreeting
          Line 19 : Loop: FOR
          Line 20 : Built-In: PRINT
          Line 21 : Send Message
          Line 26 : msgRcv: updateGreeting
          Line 27 : Assignment
          Line 32 : MAIN
          Line 33 : Assignment
          Line 36 : Join
          Line 39 : Send Message
          Line 42 : Send Message
          Line 43 : Send Message
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: Complete Try
      id: complete-try
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: Complete Try
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: "% Cleaned up version of the first testCase\n\nActor LinkedInUser1
          {\n\n    % Our Actors Fields\n    actorVars {\n        Set<ID> Followers;\n
          \       Set<ID> Followings;\n        Set<ID> Block;\n        Set<ID> CloseFriends;\n\n
          \       List<string> posts;\n        List<string> closeFriendPosts;  \n\n
          \       string name;\n\n        int age;\n    }\n\n    % Our Actors Constructor\n
          \   LinkedInUser1(Set<ID> Connections){\n        % constructor\n        ID
          ac;\n        % initially follows its contacts\n        for (ac in Connections)
          {\n            % Send Policy\n            ac.FollowRequest()  @observers(private(Followers,null));
          % we have two message type : 1- observe message 2- service message\n        }\n
          \   }\n\n    % Receive Policy\n    msgRcv @authorized(public(Block, null))
          FollowRequest() {\n        self.ageCompare(age);\n    }\n\n    % Boradcast
          Policy\n    msgObs FollowRequest() {\n        print(\"FOLLOW SHODAM\");\n
          \   }\n\n    msgRcv ageCompare (int senderAge) {\n        if (senderAge
          > age) {\n            self.accept() @observers(private(sender,null));\n
          \           sender.acceptFollow();\n        } else { % we will block the
          users that are younger than us !!\n            Block.add(sender);\n        }\n
          \   }\n\n    msgRcv accept() {\n        if (!Followings.include(sender))
          {\n            Followings.add(sender);\n        }\n    }\n\n    msgObs accept()
          {\n        print(\"GHABOL KARDAM\");\n    }\n\n}\n\nmain () {\n}"
        expected-output: |-
          Line 25 : Loop: FOR
          Line 27 : Send Message
          Line 27 : Built-In: PRIVATE
          Line 32 : Built-In: PUBLIC
          Line 32 : msgRcv: FollowRequest
          Line 33 : Send Message
          Line 37 : msgObs: FollowRequest
          Line 38 : Built-In: PRINT
          Line 41 : msgRcv: ageCompare
          Line 42 : Decision: IF
          Line 42 : Operator:>
          Line 43 : Send Message
          Line 43 : Built-In: PRIVATE
          Line 44 : Send Message
          Line 45 : Decision: ELSE
          Line 46 : Built-In: ADD
          Line 50 : msgRcv: accept
          Line 51 : Decision: IF
          Line 51 : Built-In: INCLUDE
          Line 51 : Operator:!
          Line 52 : Built-In: ADD
          Line 56 : msgObs: accept
          Line 57 : Built-In: PRINT
          Line 62 : MAIN
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: New Constructor
      id: new-constructor
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: New Constructor
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: "% Actor communication where Actor X sends a message to Actor Y, and
          Actor Z observes this message\n\nActor X {\n    actorVars {\n        string
          name;\n        int id;\n    }\n\n    % Constructor\n    X(string name, int
          id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    %
          Method to send message to Y, observed by Z\n    msgRcv sendMessage(string
          msgContent, ID receiver, ID observer) {\n        print(name + \" sends message
          to \" + receiver + \": \" + msgContent);\n        \n        % Send the message
          to Y’s queue as the recipient and Z’s queue as the observer\n        receiver.receiveMessage(msgContent)
          @observers(private(observer, null));\n    }\n}\n\nActor Y {\n    actorVars
          {\n        string name;\n        int id;\n    }\n\n    % Constructor\n    Y(string
          name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n\n
          \   % Handler to receive a message\n    msgRcv receiveMessage(string msgContent)
          {\n    }\n}\n\nActor Z {\n    actorVars {\n        string name;\n        int
          id;\n    }\n\n    % Constructor\n    Z(string name, int id) {\n        this.name
          = name;\n        this.id = id;\n    }\n\n    % Observer handler to log observed
          messages\n    msgRcv observeMessage(string msgContent) {\n    }\n}\n\nmain()
          {\n    % Instantiation of actors X, Y, and Z\n    X senderActor = new X(\"Alice\",
          101);\n    Y receiverActor = new Y(\"Bob\", 102);\n    Z observerActor =
          new Z(\"Charlie\", 103);\n\n    % Alice sends message \"Hello, Bob!\" to
          Bob, observed by Charlie\n    senderActor.sendMessage(\"Hello, Bob!\", receiverActor,
          observerActor);\n}\n"
        expected-output: |-
          Line 11 : Assignment
          Line 12 : Assignment
          Line 16 : msgRcv: sendMessage
          Line 17 : Built-In: PRINT
          Line 17 : Operator:+
          Line 17 : Operator:+
          Line 17 : Operator:+
          Line 17 : Operator:+
          Line 20 : Send Message
          Line 20 : Built-In: PRIVATE
          Line 32 : Assignment
          Line 33 : Assignment
          Line 37 : msgRcv: receiveMessage
          Line 49 : Assignment
          Line 50 : Assignment
          Line 54 : msgRcv: observeMessage
          Line 58 : MAIN
          Line 60 : Assignment
          Line 61 : Assignment
          Line 62 : Assignment
          Line 65 : Send Message
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: Actor
      id: actor
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: Actor
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: |-
          % We define actors with primitive {Actor}
          Actor myActor {

              % We define actor variables with primitive {actorVars}
              actorVars {
                  string name;
                  int age;
                  ID accID;
              }

              % Constructor
              myActor(int a, int b) {
                  % Maow
              }

              % We define our service massage handler with primitive {msgRcv}
              msgRcv myReciever(int a, int b) {
                  % Maow
              }

          }

          main () {
          }
        expected-output: |-
          Line 17 : msgRcv: myReciever
          Line 23 : MAIN
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: Record
      id: record
      uses: classroom-resources/autograding-io-grader@v1
      with:
        test-name: Record
        setup-command: cd src/main/grammar && java -jar ../../../utilities/antlr-4.13.1-complete.jar
          SOACT.g4 && javac -cp ../../../utilities/antlr-4.13.1-complete.jar SOACT*.java
        command: cd src/main/grammar && java -cp ../../../utilities/antlr-4.13.1-complete.jar:.
          org.antlr.v4.gui.TestRig SOACT soact
        input: |
          % Record acts just like struct in CPP
          Record Person {
              string name;
              int age;
              string address;
          }

          Actor PersonManager {
              actorVars {
                  Person person;
              }

              % Message handler to create a new Person record
              msgRcv createPerson(string name, int age, string address) {
                  Person person = Person{name: name, age: age, address: address};
                  print("Person created: " + person);
                  sender.updatePerson(person);
              }

              % Message handler to update the address of a Person record
              msgRcv updateAddress(Person person, string newAddress) {
                  Person updatedPerson = person{address: newAddress}; % Record update syntax
                  print("Updated person: " + updatedPerson);
                  sender.updatePerson(person);
              }

              % Message handler to display a Persons details
              msgRcv displayPerson(Person person) {
                  print("Name: " + person.name + ", Age: " + person.age + ", Address: " + person.address);
              }

              msgRcv updatePerson(Person person) {
                  self.person = person;
              }
          }

          main() {
              % Sample instantiation and message passing
              PersonManager manager = PersonManager();

              % Create a new Person
              Person john = manager.createPerson("John Doe", 30, "123 Main St");

              % Update the address
              john = manager.updateAddress(john, "456 Elm St");

              % Display the updated Person record
              manager.displayPerson(john);  % Output: Name: John Doe, Age: 30, Address: 456 Elm St
          }
        expected-output: |-
          Line 2 : Record
          Line 14 : msgRcv: createPerson
          Line 15 : Assignment
          Line 16 : Built-In: PRINT
          Line 16 : Operator:+
          Line 17 : Send Message
          Line 21 : msgRcv: updateAddress
          Line 22 : Assignment
          Line 23 : Built-In: PRINT
          Line 23 : Operator:+
          Line 24 : Send Message
          Line 28 : msgRcv: displayPerson
          Line 29 : Built-In: PRINT
          Line 29 : Operator:+
          Line 29 : Operator:+
          Line 29 : Operator:+
          Line 29 : Operator:+
          Line 29 : Operator:+
          Line 32 : msgRcv: updatePerson
          Line 33 : Assignment
          Line 37 : MAIN
          Line 39 : Send Message
          Line 39 : Assignment
          Line 42 : Send Message
          Line 42 : Assignment
          Line 45 : Send Message
          Line 45 : Assignment
          Line 48 : Send Message
        comparison-method: contains
        timeout: 10
        max-score: 1
    - name: Autograding Reporter
      uses: classroom-resources/autograding-grading-reporter@v1
      env:
        TEST_RESULTS: "${{steps.test.outputs.result}}"
        COMMENT_RESULTS: "${{steps.comment.outputs.result}}"
        ACCESS-SPECIFIER_RESULTS: "${{steps.access-specifier.outputs.result}}"
        LOOPS_RESULTS: "${{steps.loops.outputs.result}}"
        MESSAGES_RESULTS: "${{steps.messages.outputs.result}}"
        HANDLERS_RESULTS: "${{steps.handlers.outputs.result}}"
        RECURSION_RESULTS: "${{steps.recursion.outputs.result}}"
        PIPE-OPERATOR_RESULTS: "${{steps.pipe-operator.outputs.result}}"
        CUSTOM-PRIMITIVE_RESULTS: "${{steps.custom-primitive.outputs.result}}"
        JOIN-BLOCK_RESULTS: "${{steps.join-block.outputs.result}}"
        COMPLETE-TRY_RESULTS: "${{steps.complete-try.outputs.result}}"
        NEW-CONSTRUCTOR_RESULTS: "${{steps.new-constructor.outputs.result}}"
        ACTOR_RESULTS: "${{steps.actor.outputs.result}}"
        RECORD_RESULTS: "${{steps.record.outputs.result}}"
      with:
        runners: test,comment,access-specifier,loops,messages,handlers,recursion,pipe-operator,custom-primitive,join-block,complete-try,new-constructor,actor,record
