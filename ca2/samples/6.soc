% The pipe operator just like the one used in bash/shell

Actor StringProcessor {

    actorVars {
        string result;
    }

    % Message handler to convert string to lowercase
    msgRcv toLowerCase(string input) {
        sender.result = input.toLower();
    }

    % Message handler with the same name as the actor (error)
    msgRcv StringProcessor(string input) {
        sender.result = input.reverse(); % Reverse logic
    }

    % Message handler to add a suffix
    msgRcv addSuffix(string input, string suffix) {
        sender.result = input + suffix;
    }

    % Message handler with the same name as the actor (error)
    msgRcv StringProcessor(int input) {
        % some code to convert int to string
    }

    % Message handler to demonstrate chaining using "pipe-like" operator
    msgRcv processString(string input, string suffix) {
        result = input;
        join {
            result = result % the output of the previous goes into the input of the next 
                            |> self.toLowerCase()
                            |> self.StringProcessor()  % Call the conflicting handler
                            |> self.addSuffix(suffix);
            print("Processed string: " + result);
        }
    }
}

main() {
    % Sample instantiation and message passing
    StringProcessor processor = new StringProcessor();

    % Example string to process
    string myString = "HELLO";

    % Chain operations: convert to lowercase, reverse, and add suffix
    processor.processString(myString, "_world");
}
