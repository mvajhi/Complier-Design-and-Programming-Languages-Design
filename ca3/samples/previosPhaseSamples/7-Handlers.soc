% How handlers work with msgRcv syntax in our language
Actor LinkedInUser {
    actorVars {
        Set<ID> Followers;
        Set<ID> Followings;
        Set<ID> Block;

        List<string> posts;
        List<string> closeFriendPosts;

        string name;
        int age;
    }

    % Receive Policy
    msgRcv @authorized(public(Block, null)) FollowRequest() {
        % The @authorized primitive specifies which actors are allowed to call our handler
        % This does not mean that our handler is observer or servers it just decides which actors can call it
        ageCompare(age);
    }

    msgRcv ageCompare (int senderAge) {
        if (senderAge > age) {
            accept() @observers(private(sender,null));
            sender.acceptFollow();
        } else { % we will block the users that are younger than us !!
            Block.add(sender);
        }
    }

    msgRcv acceptFollow() {
        if (!Followings.include(sender)) {
            Followings.add(sender);
        }
    }

    msgRcv accept() {
        if (!Followers.include(sender)) {
            Followers.add(sender);
        }
    }

    msgObs accept() {
        print("PASANDIDE SHOD");
    }

    msgRcv Post(string s) {
        if (sender!=self) {
            % Post sending logic
        }
    }
}

main () {
} 