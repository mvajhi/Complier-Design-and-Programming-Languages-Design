% Actor communication where Actor X sends a message to Actor Y, and Actor Z observes self message

Actor X {
    actorVars {
        string name;
        int id;
    }

    % Constructor
    X(string name, int id) {
        self.name = name;
        self.id = id;
    }

    % Method to send message to Y, observed by Z
    msgRcv sendMessage(string msgContent, ID receiver, ID observer) {
        print(name + " sends message to " + receiver + ": " + msgContent);
        
        % Send the message to Y’s queue as the recipient and Z’s queue as the observer
        receiver.receiveMessage(msgContent) @observers(private(observer, null));
    }
}

Actor Y {
    actorVars {
        string name;
        int id;
    }

    % Constructor
    Y(string name, int id) {
        self.name = name;
        self.id = id;
    }

    % Handler to receive a message
    msgRcv receiveMessage(string msgContent) {
    }
}

Actor Z {
    actorVars {
        string name;
        int id;
    }

    % Constructor
    Z(string name, int id) {
        self.name = name;
        self.id = id;
    }

    % Observer handler to log observed messages
    msgRcv observeMessage(string msgContent) {
    }
}

main() {
    % Instantiation of actors X, Y, and Z
    X senderActor = new X("Alice", 101);
    Y receiverActor = new Y("Bob", 102);
    Z observerActor = new Z("Charlie", 103);

    % Alice sends message "Hello, Bob!" to Bob, observed by Charlie
    senderActor.sendMessage("Hello, Bob!", receiverActor, observerActor);
}

%--------------------------------------------------------------
% My test code

Actor Y {
    msgRcv @authorized(public(a,private(b,c))) receiveMessage(string msgContent)
    {
     result = result
                    |> self.observeMessage(msgContent)
                    |> self.observeMessage(msgContent)
                    |> self.observeMessage(msgContent);
    }
}

primitive D {
    hi,
    bye
}

Record P
{
    int a;
    string b;
}

main() {
    if (a == 25+6)
    {
        a.pint("hi");
    }
    else
    {
        if (a == 25+6)
        {
            a.pint("hi");
        }
        else
        {
            a.pint("hi");
        }
    }

    boolean a = D::hi;

    int a = 1 || 2 && 3 == 4 > 5 + 6 / --7++ mod x[(8 + 9)];
    Set<ID> b = new B(1,2);
    T c[5 + 23 mod 3] = T{a: 1 + 2, b: "hi"};

    x + y * z - b / c;

    P a = P{a: 1, b: "hi"};

    for (i in a)
    {
        a = 1;
    }

    while (a < 10)
    {
        a++;
        continue;
        break;
    }

    Y.receiveMessage("hi") @observers(public(a,private(b,c)));

    join {
        a = 1;
        print("hi");
    }
}
